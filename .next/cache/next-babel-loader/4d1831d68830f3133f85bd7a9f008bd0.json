{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/tucker/projects/bon-vivant-cocktails/client/lib/withApollo.js\";\nimport React, { Component } from 'react';\nimport cookie from 'cookie';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo';\n\nfunction parseCookies(req) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\n}\n\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(WithData, _Component);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var AppTree, _ctx$ctx, req, res, apollo, appProps, apolloState;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n                  apollo = initApollo({}, {\n                    getToken: function getToken() {\n                      return parseCookies(req).token;\n                    }\n                  });\n                  ctx.ctx.apolloClient = apollo;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return App.getInitialProps(ctx);\n\n                case 7:\n                  appProps = _context.sent;\n\n                case 8:\n                  if (!(res && res.finished)) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {});\n\n                case 10:\n                  if (!(typeof window === 'undefined')) {\n                    _context.next = 20;\n                    break;\n                  }\n\n                  _context.prev = 11;\n                  _context.next = 14;\n                  return getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 44\n                    },\n                    __self: this\n                  })));\n\n                case 14:\n                  _context.next = 19;\n                  break;\n\n                case 16:\n                  _context.prev = 16;\n                  _context.t0 = _context[\"catch\"](11);\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 19:\n                  Head.rewind(); // This is used to clear a side effect, since getDataFromTree does not call componentWillUnmount()\n\n                case 20:\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 22:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[11, 16]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props));\n      _this.apolloClient = initApollo(props.apolloState, {\n        getToken: function getToken() {\n          return parseCookies().token;\n        }\n      });\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({\n          apolloClient: this.apolloClient\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return WithData;\n  }(Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(App.displayName, \")\")), _temp;\n});","map":{"version":3,"sources":["/home/tucker/projects/bon-vivant-cocktails/client/lib/withApollo.js"],"names":["React","Component","cookie","getDataFromTree","Head","initApollo","parseCookies","req","options","parse","headers","document","App","ctx","AppTree","res","apollo","getToken","token","apolloClient","appProps","getInitialProps","finished","window","console","error","rewind","apolloState","cache","extract","props","displayName"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;AAGA,SAASC,YAAT,CAAuBC,GAAvB,EAA0C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACxC,SAAON,MAAM,CAACO,KAAP,CAAaF,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAYR,MAAZ,IAAsB,EAAzB,GAA8BS,QAAQ,CAACT,MAAvD,EAA+DM,OAA/D,CAAP;AACD;;AACD,gBAAe,UAAAI,GAAG,EAAI;AAAA;;AACpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAGgCC,GAHhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKMC,kBAAAA,OALN,GAOQD,GAPR,CAKMC,OALN,aAOQD,GAPR,CAMMA,GANN,EAMaN,GANb,YAMaA,GANb,EAMkBQ,GANlB,YAMkBA,GANlB;AAQUC,kBAAAA,MARV,GAQmBX,UAAU,CACvB,EADuB,EAEvB;AACEY,oBAAAA,QAAQ,EAAE;AAAA,6BAAMX,YAAY,CAACC,GAAD,CAAZ,CAAkBW,KAAxB;AAAA;AADZ,mBAFuB,CAR7B;AAeIL,kBAAAA,GAAG,CAACA,GAAJ,CAAQM,YAAR,GAAuBH,MAAvB;AAEII,kBAAAA,QAjBR,GAiBmB,EAjBnB;;AAAA,uBAkBQR,GAAG,CAACS,eAlBZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAmBuBT,GAAG,CAACS,eAAJ,CAAoBR,GAApB,CAnBvB;;AAAA;AAmBMO,kBAAAA,QAnBN;;AAAA;AAAA,wBAsBQL,GAAG,IAAIA,GAAG,CAACO,QAtBnB;AAAA;AAAA;AAAA;;AAAA,mDAwBa,EAxBb;;AAAA;AAAA,wBA2BQ,OAAOC,MAAP,KAAkB,WA3B1B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBA+BcpB,eAAe,CAAC,oBAAC,OAAD,eAAaiB,QAAb;AAAuB,oBAAA,YAAY,EAAEJ,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAD,CA/B7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiCQQ,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AAjCR;AAoCMrB,kBAAAA,IAAI,CAACsB,MAAL,GApCN,CAoCqB;;AApCrB;AAuCUC,kBAAAA,WAvCV,GAuCwBX,MAAM,CAACY,KAAP,CAAaC,OAAb,EAvCxB;AAAA,qEA0CST,QA1CT;AA2CMO,oBAAAA,WAAW,EAAXA;AA3CN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA+CE,sBAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AAEA,YAAKX,YAAL,GAAoBd,UAAU,CAACyB,KAAK,CAACH,WAAP,EAAoB;AAChDV,QAAAA,QAAQ,EAAE,oBAAM;AACd,iBAAOX,YAAY,GAAGY,KAAtB;AACD;AAH+C,OAApB,CAA9B;AAHiB;AAQlB;;AAvDH;AAAA;AAAA,+BAyDW;AACP,eAAQ,oBAAC,GAAD;AAAK,UAAA,YAAY,EAAE,KAAKC;AAAxB,WAA0C,KAAKW,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAR;AACD;AA3DH;;AAAA;AAAA,IAA8B7B,SAA9B,6DACmCW,GAAG,CAACmB,WADvC;AA6DD,CA9DD","sourcesContent":["import React, { Component } from 'react'\nimport cookie from 'cookie'\nimport { getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\n\nimport initApollo from './initApollo'\n\n\nfunction parseCookies (req, options = {}) {\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options)\n}\nexport default App => {\n  return class WithData extends Component {\n    static displayName = `WithData(${App.displayName})`\n    \n    static async getInitialProps (ctx) {\n      const {\n        AppTree,\n        ctx: { req, res}\n      } = ctx;\n      const apollo = initApollo(\n        {},\n        {\n          getToken: () => parseCookies(req).token\n        }\n      )\n\n      ctx.ctx.apolloClient = apollo\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      if (res && res.finished) {\n        // When redirecting, response is finished. No need to render further.\n        return {}\n      }\n\n      if (typeof window === 'undefined') {\n        // Run all graphql queries in the tree\n        // and extract the resulting data\n        try {\n          await getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />)\n        } catch(error) {\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        Head.rewind(); // This is used to clear a side effect, since getDataFromTree does not call componentWillUnmount()\n      }\n      \n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      }\n    }\n\n    constructor(props) {\n      super(props)\n\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token\n        }\n      })\n    }\n\n    render() {\n      return (<App apolloClient={this.apolloClient} {...this.props} />)\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}