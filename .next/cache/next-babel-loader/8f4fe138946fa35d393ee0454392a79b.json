{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/tucker/projects/bon-vivant-cocktails/client/lib/withApollo.js\";\nimport React, { Component } from 'react';\nimport cookie from 'cookie';\nimport { getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo';\n\nfunction parseCookies(req, options = {}) {\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options);\n}\n\nexport default (App => {\n  var _class, _temp;\n\n  return _temp = _class = class WithData extends Component {\n    static async getInitialProps(ctx) {\n      const {\n        AppTree,\n        ctx: {\n          req,\n          res\n        }\n      } = ctx;\n      const apollo = initApollo({}, {\n        getToken: () => parseCookies(req).token\n      });\n      ctx.ctx.apolloClient = apollo;\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        // When redirecting, response is finished. No need to render further.\n        return {};\n      }\n\n      if (typeof window === 'undefined') {\n        // Run all graphql queries in the tree\n        // and extract the resulting data\n        try {\n          await getDataFromTree(React.createElement(AppTree, _extends({}, appProps, {\n            apolloClient: apollo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          })));\n        } catch (error) {\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        Head.rewind(); // This is used to clear a side effect, since getDataFromTree does not call componentWillUnmount()\n      }\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token;\n        }\n      });\n    }\n\n    render() {\n      return React.createElement(App, _extends({\n        apolloClient: this.apolloClient\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `WithData(${App.displayName})`), _temp;\n});","map":{"version":3,"sources":["/home/tucker/projects/bon-vivant-cocktails/client/lib/withApollo.js"],"names":["React","Component","cookie","getDataFromTree","Head","initApollo","parseCookies","req","options","parse","headers","document","App","WithData","getInitialProps","ctx","AppTree","res","apollo","getToken","token","apolloClient","appProps","finished","window","error","console","rewind","apolloState","cache","extract","constructor","props","render","displayName"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;AAGA,SAASC,YAAT,CAAuBC,GAAvB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AACxC,SAAON,MAAM,CAACO,KAAP,CAAaF,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAYR,MAAZ,IAAsB,EAAzB,GAA8BS,QAAQ,CAACT,MAAvD,EAA+DM,OAA/D,CAAP;AACD;;AACD,gBAAeI,GAAG,IAAI;AAAA;;AACpB,0BAAO,MAAMC,QAAN,SAAuBZ,SAAvB,CAAiC;AAGtC,iBAAaa,eAAb,CAA8BC,GAA9B,EAAmC;AACjC,YAAM;AACJC,QAAAA,OADI;AAEJD,QAAAA,GAAG,EAAE;AAAER,UAAAA,GAAF;AAAOU,UAAAA;AAAP;AAFD,UAGFF,GAHJ;AAIA,YAAMG,MAAM,GAAGb,UAAU,CACvB,EADuB,EAEvB;AACEc,QAAAA,QAAQ,EAAE,MAAMb,YAAY,CAACC,GAAD,CAAZ,CAAkBa;AADpC,OAFuB,CAAzB;AAOAL,MAAAA,GAAG,CAACA,GAAJ,CAAQM,YAAR,GAAuBH,MAAvB;AAEA,UAAII,QAAQ,GAAG,EAAf;;AACA,UAAIV,GAAG,CAACE,eAAR,EAAyB;AACvBQ,QAAAA,QAAQ,GAAG,MAAMV,GAAG,CAACE,eAAJ,CAAoBC,GAApB,CAAjB;AACD;;AAED,UAAIE,GAAG,IAAIA,GAAG,CAACM,QAAf,EAAyB;AACvB;AACA,eAAO,EAAP;AACD;;AAED,UAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACA;AACA,YAAI;AACF,gBAAMrB,eAAe,CAAC,oBAAC,OAAD,eAAamB,QAAb;AAAuB,YAAA,YAAY,EAAEJ,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD,CAArB;AACD,SAFD,CAEE,OAAMO,KAAN,EAAa;AACbC,UAAAA,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD;AACD;;AAEDrB,QAAAA,IAAI,CAACuB,MAAL,GATiC,CASlB;AAChB;;AAED,YAAMC,WAAW,GAAGV,MAAM,CAACW,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACKR,QADL;AAEEM,QAAAA;AAFF;AAID;;AAEDG,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AAEA,WAAKX,YAAL,GAAoBhB,UAAU,CAAC2B,KAAK,CAACJ,WAAP,EAAoB;AAChDT,QAAAA,QAAQ,EAAE,MAAM;AACd,iBAAOb,YAAY,GAAGc,KAAtB;AACD;AAH+C,OAApB,CAA9B;AAKD;;AAEDa,IAAAA,MAAM,GAAG;AACP,aAAQ,oBAAC,GAAD;AAAK,QAAA,YAAY,EAAE,KAAKZ;AAAxB,SAA0C,KAAKW,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAR;AACD;;AA3DqC,GAAxC,yCACwB,YAAWpB,GAAG,CAACsB,WAAY,GADnD;AA6DD,CA9DD","sourcesContent":["import React, { Component } from 'react'\nimport cookie from 'cookie'\nimport { getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\n\nimport initApollo from './initApollo'\n\n\nfunction parseCookies (req, options = {}) {\n  return cookie.parse(req ? req.headers.cookie || '' : document.cookie, options)\n}\nexport default App => {\n  return class WithData extends Component {\n    static displayName = `WithData(${App.displayName})`\n    \n    static async getInitialProps (ctx) {\n      const {\n        AppTree,\n        ctx: { req, res}\n      } = ctx;\n      const apollo = initApollo(\n        {},\n        {\n          getToken: () => parseCookies(req).token\n        }\n      )\n\n      ctx.ctx.apolloClient = apollo\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      if (res && res.finished) {\n        // When redirecting, response is finished. No need to render further.\n        return {}\n      }\n\n      if (typeof window === 'undefined') {\n        // Run all graphql queries in the tree\n        // and extract the resulting data\n        try {\n          await getDataFromTree(<AppTree {...appProps} apolloClient={apollo} />)\n        } catch(error) {\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        Head.rewind(); // This is used to clear a side effect, since getDataFromTree does not call componentWillUnmount()\n      }\n      \n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      }\n    }\n\n    constructor(props) {\n      super(props)\n\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token\n        }\n      })\n    }\n\n    render() {\n      return (<App apolloClient={this.apolloClient} {...this.props} />)\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}