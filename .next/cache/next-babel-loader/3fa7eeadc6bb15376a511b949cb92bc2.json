{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/tucker/projects/bon-vivant-cocktails/client/components/SpecList.js\";\nimport React from \"react\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    specs {\\n      id\\n      name\\n      description\\n      ingredients {\\n        quantity\\n        measure\\n        ingredient {\\n          name\\n        }\\n        canSub\\n        subWith\\n      }\\n      directions\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nvar GET_SPECS = gql(_templateObject());\nexport default (function () {\n  var _useQuery = useQuery(GET_SPECS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return \"Loading...\";\n  if (error) return \"Error! \".concat(error.message);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, data.specs.map(function (spec) {\n    return React.createElement(\"div\", {\n      key: spec.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, spec.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, spec.description));\n  }));\n});","map":{"version":3,"sources":["/home/tucker/projects/bon-vivant-cocktails/client/components/SpecList.js"],"names":["gql","useQuery","GET_SPECS","loading","error","data","message","specs","map","spec","id","name","description"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,IAAMC,SAAS,GAAGF,GAAH,mBAAf;AAoBA,gBAAe,YAAM;AAAA,kBACcC,QAAQ,CAACC,SAAD,CADtB;AAAA,MACXC,OADW,aACXA,OADW;AAAA,MACFC,KADE,aACFA,KADE;AAAA,MACKC,IADL,aACKA,IADL;;AAEnB,MAAIF,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,wBAAiBA,KAAK,CAACE,OAAvB;AAEX,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCD,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI;AAAA,WAClB;AAAK,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,IAAI,CAACE,IAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,IAAI,CAACG,WAAT,CAFF,CADkB;AAAA,GAAnB,CADD,CADF;AASD,CAdD","sourcesContent":["import gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\n\nconst GET_SPECS = gql`\n  {\n    specs {\n      id\n      name\n      description\n      ingredients {\n        quantity\n        measure\n        ingredient {\n          name\n        }\n        canSub\n        subWith\n      }\n      directions\n    }\n  }\n`;\n\nexport default () => {\n  const { loading, error, data } = useQuery(GET_SPECS);\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <div>\n    {data.specs.map(spec => (\n      <div key={spec.id}>\n        <h1>{spec.name}</h1>\n        <p>{spec.description}</p>\n      </div>))}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}