{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nimport config from '../config/keys';\nvar apolloClient = null;\n\nif (typeof window === 'undefined') {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken,\n      fetchOptions = _ref.fetchOptions;\n  var isBrowser = typeof window !== 'undefined';\n  var httpLink = createHttpLink({\n    uri: config.BACKEND_URI,\n    credentials: 'same-origin',\n    fetchOptions: fetchOptions\n  });\n  var authLink = setContext(function (_, headers) {\n    var token = getToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"Bearer \".concat(token) : ''\n      })\n    };\n  });\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  if (typeof window === 'undefined') {\n    var fetchOptions = {};\n    return create(initialState, _objectSpread({}, options, {\n      fetchOptions: fetchOptions\n    }));\n  }\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/home/tucker/projects/bon-vivant-cocktails/client/lib/initApollo.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","fetch","config","apolloClient","window","global","create","initialState","getToken","fetchOptions","isBrowser","httpLink","uri","BACKEND_URI","credentials","authLink","_","headers","token","authorization","connectToDevTools","ssrMode","link","concat","cache","restore","initApollo","options"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA,IAAIC,YAAY,GAAG,IAAnB;;AAEA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCC,EAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACD;;AAED,SAASK,MAAT,CAAiBC,YAAjB,QAA2D;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AACzD,MAAMC,SAAS,GAAG,OAAON,MAAP,KAAkB,WAApC;AACA,MAAMO,QAAQ,GAAGZ,cAAc,CAAC;AAC9Ba,IAAAA,GAAG,EAAEV,MAAM,CAACW,WADkB;AAE9BC,IAAAA,WAAW,EAAE,aAFiB;AAG9BL,IAAAA,YAAY,EAAZA;AAH8B,GAAD,CAA/B;AAMA,MAAMM,QAAQ,GAAGf,UAAU,CAAC,UAACgB,CAAD,EAAIC,OAAJ,EAAgB;AAC1C,QAAMC,KAAK,GAAGV,QAAQ,EAAtB;AACA,WAAO;AACLS,MAAAA,OAAO,oBACFA,OADE;AAELE,QAAAA,aAAa,EAAED,KAAK,oBAAaA,KAAb,IAAuB;AAFtC;AADF,KAAP;AAMD,GAR0B,CAA3B;AAUA,SAAO,IAAIrB,YAAJ,CAAiB;AACtBuB,IAAAA,iBAAiB,EAAEV,SADG;AAEtBW,IAAAA,OAAO,EAAE,CAACX,SAFY;AAGtBY,IAAAA,IAAI,EAAEP,QAAQ,CAACQ,MAAT,CAAgBZ,QAAhB,CAHgB;AAItBa,IAAAA,KAAK,EAAE,IAAI1B,aAAJ,GAAoB2B,OAApB,CAA4BlB,YAAY,IAAI,EAA5C;AAJe,GAAjB,CAAP;AAMD;;AAED,eAAe,SAASmB,UAAT,CAAoBnB,YAApB,EAAkCoB,OAAlC,EAA2C;AACxD,MAAI,OAAOvB,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAIK,YAAY,GAAG,EAAnB;AACA,WAAOH,MAAM,CAACC,YAAD,oBACRoB,OADQ;AAEXlB,MAAAA,YAAY,EAAZA;AAFW,OAAb;AAID;;AAED,MAAI,CAACN,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGG,MAAM,CAACC,YAAD,EAAeoB,OAAf,CAArB;AACD;;AAED,SAAOxB,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache } from 'apollo-boost'\nimport { createHttpLink } from 'apollo-link-http'\nimport { setContext } from 'apollo-link-context'\nimport fetch from 'isomorphic-unfetch'\nimport config from '../config/keys'\n\nlet apolloClient = null;\n\nif (typeof window === 'undefined') {\n  global.fetch = fetch;\n}\n\nfunction create (initialState, { getToken, fetchOptions }) {\n  const isBrowser = typeof window !== 'undefined'\n  const httpLink = createHttpLink({\n    uri: config.BACKEND_URI,\n    credentials: 'same-origin',\n    fetchOptions\n  })\n\n  const authLink = setContext((_, headers) => {\n    const token = getToken()\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    }\n  })\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {}),\n  })\n}\n\nexport default function initApollo(initialState, options) {\n  if (typeof window === 'undefined') {\n    let fetchOptions = {}\n    return create(initialState, {\n      ...options,\n      fetchOptions\n    })\n  }\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options)\n  }\n\n  return apolloClient;\n}"]},"metadata":{},"sourceType":"module"}