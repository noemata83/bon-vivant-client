{"version":3,"file":"static/webpack/static/development/pages/_app.js.c37576e67214193d95ac.hot-update.js","sources":["webpack:///./lib/initApollo.js"],"sourcesContent":["import { ApolloClient, InMemoryCache } from 'apollo-boost'\nimport { createHttpLink } from 'apollo-link-http'\nimport { setContext } from 'apollo-link-context'\nimport fetch from 'isomorphic-unfetch'\nimport config from '../config/keys'\n\nlet apolloClient = null;\n\nif (typeof window === 'undefined') {\n  global.fetch = fetch;\n}\n\nfunction create (initialState, { getToken, fetchOptions }) {\n  const isBrowser = typeof window !== 'undefined'\n  const httpLink = createHttpLink({\n    uri: config.BACKEND_URI,\n    credentials: 'same-origin',\n    fetchOptions\n  })\n\n  const authLink = setContext((_, previousContext) => {\n    const token = getToken()\n    return {\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    }\n  })\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {}),\n  })\n}\n\nexport default function initApollo(initialState, options) {\n  if (typeof window === 'undefined') {\n    let fetchOptions = {}\n    return create(initialState, {\n      ...options,\n      fetchOptions\n    })\n  }\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options)\n  }\n\n  return apolloClient;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,aAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA,kCAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}